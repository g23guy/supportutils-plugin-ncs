#!/bin/bash
VER=2.0.0-110204.DEV.15
MODATE="2011 Feb 04"

# todo
# 1. put cluster ldap query in it's own file.
# 2. read cn location from file's dn:

##############################################################################
#  ncsvr - Novell Cluster Service Volume Resource Plugin for Supportconfig
#  Copyright (C) 2011 Novell, Inc.
#
#  This plugin performs an authenticated, non-destructive LDAP search of
#  the eDirectory database for Novell Cluster Services volume resources. 
#  Information about each eDirectory object associated with the volume 
#  resource is used to help confirm the proper object association. It also 
#  checks for expected attributes on each of the objects.
#
##############################################################################
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#  Authors/Contributors:
#     Jason Record (jrecord@novell.com)
#
##############################################################################

# Known Issues
# 1. Generates duplicate records with BCC
# 2. Does not support multiple clusters in a tree


# global variables
##############################################################################
if [ -x /usr/ldaptools/bin/ldapsearch ]; then
	LDAP_BIN=/usr/ldaptools/bin/ldapsearch
elif [ -x /opt/novell/eDirectory/bin/ldapsearch ]; then
	LDAP_BIN=/opt/novell/eDirectory/bin/ldapsearch 
elif [ -x /usr/bin/ldapsearch ]; then
	LDAP_BIN=/usr/bin/ldapsearch
else
	LDAP_BIN="" 
fi
DATESTAMP=$(date +%y%m%d)
TIMESTAMP=$(date +%H%M%S)
HOSTNAME=$(hostname)
test -z "$HOSTNAME" && HOSTNAME=unknown
# LOG is set by supportconfig
LOGROOT="${LOG:="/var/log/nts_ncsvr_${HOSTNAME}_${DATESTAMP}_${TIMESTAMP}"}/ldap-ncsvr-files"
FILE_CLUSTERS="${LOGROOT}/clusters.txt"
LOG_SUMMARY="${LOGROOT}/Analysis.txt"
VRSEQ=0
TOTAL_ERRORS=0
TOTAL_OBJ=0
TOTAL_ATTR=0
TOTAL_LINK=0
TOTAL_VOLRES=0
PATH=/bin:/sbin:$PATH
export PATH
FMT_INTRO="%-25s %s\n"
FMT_OBJ="%-35s %s\n"
FMT_SHORT="%-9s %s\n"
FMT_CURRENT=$FMT_INTRO

# function definitions
##############################################################################

title() {
	log_detail "---------------------------------------------------------"
	log_detail " Novell Open Enterprise Server"
	log_detail " NCS Volume Resource Plugin for Supportconfig"
	log_detail " Version: $VER ($MODATE)"
	log_detail " Date:    $(date +"%D %T")"
	log_detail "---------------------------------------------------------"
}

get_credentials() {
	KEYFOUND=1
	DERFILE=".$(namconfig get preferred-server 2>/dev/null | cut -d= -f2).der"
	CERT_DIRECTORIES="/var/lib/novell-lum /var/nam"
	for CERT_DIR in $CERT_DIRECTORIES
	do
		AUTHKEY="${CERT_DIR}/${DERFILE}"
		if [ -s $AUTHKEY ]; then
			log_summary "Using:" "$AUTHKEY"
			KEYFOUND=1
			break
		else
			log_summary "File not found:" "$AUTHKEY"
			KEYFOUND=0
		fi
	done

	if [ $KEYFOUND = 0 ]; then
		log_detail "ERROR: Missing *.der file for TLS authentication in $CERT_DIRECTORIES"
		log_detail
		((TOTAL_ERRORS++))
		show_summary
		exit 1
	fi

	if [ -x $(which namconfig 2>/dev/null) ]; then
		PREF_SERVER=$(namconfig get preferred-server | cut -d= -f2)
		test -z "$PREF_SERVER" && PREF_SERVER=localhost
	else
		PREF_SERVER=localhost
	fi
	
	if [ -z "$NCSVR_ADMIN" -a -z "$NCSVR_PASS" ]; then
		if [ -x /opt/novell/ncs/bin/ncs-casautil ]; then
			log_summary "Credentials:" "CASA"
			NCSVR_ADMIN=$(SECRET_ID=NovellClusterServices.Novell /opt/novell/ncs/bin/ncs-casautil -d | sed -e '1d' | head -1)
			NCSVR_PASS=$(SECRET_ID=NovellClusterServices.Novell /opt/novell/ncs/bin/ncs-casautil -d | sed -e '1d' | tail -1)
		else
			log_detail "ERROR: Unable to access cluster credentials"
			log_detail "       Consider setting NCSVR_ADMIN and NCSVR_PASS in the environment first."
			log_detail "       For example, run:"
			log_detail "       NCSVR_ADMIN=\"cn=admin,o=novell\" NCSVR_PASS=\"Novell\" supportconfig"
			log_detail
			exit 2
		fi
	else
		log_summary "Credentials:" "Environment, NCSVR_ADMIN and NCSVR_PASS"
	fi
	if [ -z "$NCSVR_ADMIN" -a -n "$NCSVR_PASS" ]; then
		log_detail "ERROR: NCSVR_ADMIN undefined"
		log_detail "       Define both NCSVR_ADMIN and NCSVR_PASS"
		log_detail
		exit 4
	elif [ -n "$NCSVR_ADMIN" -a -z "$NCSVR_PASS" ]; then
		log_detail "ERROR: NCSVR_PASS undefined"
		log_detail "       Define both NCSVR_ADMIN and NCSVR_PASS"
		log_detail
		exit 6
	fi

	AUTH_OPTIONS="-e $AUTHKEY -D $NCSVR_ADMIN -w $NCSVR_PASS -h $PREF_SERVER"
}

ldap_cmd() {
	OUTFILE="$1"
	BASEDN="$2"
	SEARCH="$3"
	COMMENT="$4"
#	debug OUTFILE BASEDN SEARCH
	echo "#------------------------------------------------#" >> $OUTFILE
	echo "# $LDAP_BIN ${AUTH_OPTIONS} -b \"$BASEDN\" -s sub \"$SEARCH\"" | sed -e "s/-w $NCSVR_PASS/-W/" >> $OUTFILE
	if [ -n "$COMMENT" ]; then
		log_summary "Query $COMMENT" "$SEARCH"
	else
		log_summary "Query" "$SEARCH"
	fi
	$LDAP_BIN ${AUTH_OPTIONS} -b "$BASEDN" -s sub "$SEARCH" >> $OUTFILE 2>&1
	return $?
}

ldap_check() {
	$LDAP_BIN ${AUTH_OPTIONS} -b "" -s base "objectclass=*" >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		log_summary "LDAPS Connection:" "Success"
		return 0
	else
		log_summary "LDAPS Connection:" "FAILED"
		log_summary "Preferred Server:" "$PREF_SERVER"
		log_summary "DN:" "$NCSVR_ADMIN"
		$LDAP_BIN ${AUTH_OPTIONS} -b "" -s base "objectclass=*"
		log_detail
		exit 1
	fi
}

show_summary() {
	log_detail
	log_detail "===================================================="
	log_summary "TOTAL Volume Resources Analyzed:" "$TOTAL_VOLRES"
	log_summary "TOTAL Error Count:" "$TOTAL_ERRORS"
	log_summary "TOTAL Object Errors:" "$TOTAL_OBJ"
	log_summary "TOTAL Attribute Errors:" "$TOTAL_ATTR"
	log_summary "TOTAL Link Errors:" "$TOTAL_LINK"
	log_detail
}

check_attributes() {
	OBJ_TYPE=$1
	OBJ_NAME=$2
	SRC=$3

	case $OBJ_TYPE in
	VolumeResource) ATTRIB_LIST="nCSVolumes nCSNCPServer nCSRevision nCSCRMFailoverMode nCSCRMFailbackMode nCSCRMPreferredNodes nCSCRMUnloadTimeout nCSCRMUnloadScript nCSCRMLoadTimeout nCSCRMLoadScript nCSCRMIgnoreQuorum" ;;
	Server) ATTRIB_LIST="nCSVolumes nCSNetWareCluster Resource networkAddress" ;;
	Pool) ATTRIB_LIST="nssfsShared nssfsPoolID hostServer hostResourceName" ;;
	Volume) ATTRIB_LIST="linuxNCPMountPoint nssfsPool DFS-Volume-Guid hostServer hostResourceName" ;;
	Cluster)  ATTRIB_LIST="nCSSharedDiskFlag nCSEmailFilter nCSEmailAddresses nCSPortNumber nCSNetworkAddress nCSRevision nCSCRMResourcePriority nCSCRMQuorumTimeout nCSCRMQuorum nCSGIPCMaxRetransmits nCSGIPCSlaveWatchdog nCSGIPCMasterWatchdog nCSGIPCTolerance nCSGIPCHeartbeat networkAddress" ;;
	*) ATTRIB_LIST="" ;;
	esac

	MISSING_COUNT=0
	FOUND_COUNT=0
	ATTRIB_TOTAL=$(echo $ATTRIB_LIST | wc -w)
	for ATTRIBUTE in $ATTRIB_LIST
	do
		FOUND=$(grep -i ^${ATTRIBUTE}: $SRC)
		if [ -n "$FOUND" ]; then
			((FOUND_COUNT++))
		else
			log_summary " ${OBJ_NAME}" "Attribute: ${ATTRIBUTE}"
			((MISSING_COUNT++))
		fi
	done
	if [ $MISSING_COUNT -gt 0 ]; then
		log_summary " ${OBJ_NAME}" "MISSING $MISSING_COUNT of $ATTRIB_TOTAL attributes"
	else
		log_summary " ${OBJ_NAME}" "Found $FOUND_COUNT of $ATTRIB_TOTAL attributes"
	fi

	ERR_ATT=$((ERR_ATT + MISSING_COUNT))
	return 0
}

log_detail() {
	echo "$@" | tee -a $LOG_SUMMARY
}

log_summary() {
	printf "$FMT_CURRENT" "$1" "$2" | tee -a $LOG_SUMMARY
}

get_cluster() {
	ldap_cmd $FILE_CLUSTERS "" "(objectclass=nCSNetWareCluster)"
	CLUSTER_COUNT=$(grep -i ^cn: $FILE_CLUSTERS | wc -l)
	if [ $CLUSTER_COUNT -lt 1 ]; then
		((TOTAL_ERRORS++))
		log_detail "No NCS clusters found"
		log_detail
		rm -rf $LOGROOT
		show_summary
		exit 0
	fi
	CN_CLUSTER=$(cluster info basic 2>/dev/null | grep 'Cluster:' | awk '{print $2}' | cut -d, -f1)
	if [ -z "$CN_CLUSTER" ]; then
		((TOTAL_ERRORS++))
		log_detail "ERROR: Cannot determine node's cluster membership"
		log_detail
		rm -rf $LOGROOT
		show_summary
		exit 1
	fi

	DN_CLUSTERS=''
	for I in $(grep -i "^dn:" $FILE_CLUSTERS | awk '{print $2}')
	do
		TMPI=$(echo $I | sed -e 's/cn=//g;s/,.*//g')
		DN_CLUSTERS="$TMPI $DN_CLUSTERS"
	done
	log_summary "Clusters:" "$DN_CLUSTERS"

	DN_CLUSTER=$(grep -i "^dn:.*$CN_CLUSTER" $FILE_CLUSTERS | awk '{print $2}')
	DN_CLUSTER_PARENT=$(echo $DN_CLUSTER | sed -e "s/cn=${CN_CLUSTER},//")
	#debug CN_CLUSTER DN_CLUSTER DN_CLUSTER_PARENT
	log_summary "Node in Cluster:" "$CN_CLUSTER"
}

debug() {
	echo
	for i in "$@"
	do
		printf "$i="
		eval echo \${$i}
	done
	echo
}

validate_required_objects() {
	log_detail "Checking Required Objects"
	if [ -s $FILE_VOLUME_RESOURCE ]; then
#		debug DN_VOLUME_RESOURCE FILE_VOLUME_RESOURCE
		if grep -e "^dn: cn=$DN_VOLUME_RESOURCE" $FILE_VOLUME_RESOURCE &>/dev/null; then
			log_summary " $DN_VOLUME_RESOURCE" "Found Volume Resource Object"
		else
			log_summary " $DN_VOLUME_RESOURCE" "MISSING Volume Resource Object"
			((ERR_OBJ++))
		fi
	fi
	if [ -s $FILE_NCPSERVER ]; then
		if grep -e "^dn: $DN_NCPSERVER" $FILE_NCPSERVER &>/dev/null; then
			log_summary " ${CN_NCPSERVER##cn=}" "Found NCP Server Object"
		else
			log_summary " ${CN_NCPSERVER##cn=}" "MISSING NCP Server Object"
			((ERR_OBJ++))
		fi
	else
		log_summary " NCP Server Object" "Unknown"
		((ERR_OBJ++))
	fi
	if [ -s $FILE_VOLUME ]; then
		if grep -e "^dn: $DN_VOLUME" $FILE_VOLUME &>/dev/null; then
			log_summary " ${CN_VOLUME##cn=}" "Found Volume Object"
		else
			log_summary " ${CN_VOLUME##cn=}" "MISSING Volume Object"
			((ERR_OBJ++))
		fi
	else
		log_summary " Volume Object" "Unknown"
		((ERR_OBJ++))
	fi
	if [ -s $FILE_POOL ]; then
		if grep -e "^dn: $DN_POOL" $FILE_POOL &>/dev/null; then
			log_summary " ${CN_POOL##cn=}" "Found Pool Object"
		else
			log_summary " ${CN_POOL##cn=}" "MISSING Pool Object"
			((ERR_OBJ++))
		fi
	else
		log_summary " Pool Object" "Unknown"
		((ERR_OBJ++))
	fi
}

validate_object_attributes() {
	log_detail "Checking Object Attributes"
	check_attributes VolumeResource "${DN_VOLUME_RESOURCE##cn=}" $FILE_VOLUME_RESOURCE 
	check_attributes Server "${CN_NCPSERVER##cn=}" $FILE_NCPSERVER
	check_attributes Volume "${CN_VOLUME##cn=}" $FILE_VOLUME
	check_attributes Pool "${CN_POOL##cn=}" $FILE_POOL
}

confirm_object_links() {
	log_detail "Confirming Object Links"
	FMT_PREV=$FMT_CURRENT
	FMT_CURRENT=$FMT_SHORT
	DN_VR=$(grep -i ^dn: $FILE_VOLUME_RESOURCE | awk '{print $2}')
	DN_VR2NS=$(grep -i ^nCSNCPServer: $FILE_VOLUME_RESOURCE | awk '{print $2}')
	DN_VR2VL=$(grep -i ^nCSVolumes: $FILE_VOLUME_RESOURCE | awk '{print $2}')
	DN_NS=$(grep -i ^dn: $FILE_NCPSERVER | awk '{print $2}')
	DN_NS2VR=$(grep -i ^Resource: $FILE_NCPSERVER | awk '{print $2}')
	DN_NS2VL=$(grep -i ^nCSVolumes: $FILE_NCPSERVER | awk '{print $2}')
	DN_NS2CL=$(grep -i ^nCSNetWareCluster: $FILE_NCPSERVER | awk '{print $2}')
	DN_VL=$(grep -i ^dn: $FILE_VOLUME | awk '{print $2}')
	DN_VL2NS=$(grep -i ^hostServer: $FILE_VOLUME | awk '{print $2}')
	DN_VL2PL=$(grep -i ^nssfsPool: $FILE_VOLUME | awk '{print $2}')
	DN_PL=$(grep -i ^dn: $FILE_POOL | awk '{print $2}')
	DN_PL2NS=$(grep -i ^hostServer: $FILE_POOL | awk '{print $2}')
	#debug DN_VR DN_VR2NS DN_VR2VL DN_NS DN_NS2VR DN_NS2VL DN_NS2CL DN_VL DN_VL2NS DN_VL2PL DN_PL DN_PL2NS

	if [ "$DN_VR2NS" = "$DN_NS" ]; then
		log_summary " Pass" "${DN_VOLUME_RESOURCE##cn=} -> ${CN_NCPSERVER##cn=}"
	else
		log_summary " FAILED" "${DN_VOLUME_RESOURCE##cn=} -> ${CN_NCPSERVER##cn=}"
		((ERR_LNK++))
	fi

	if [ "$DN_NS2VR" = "$DN_VR" ]; then
		log_summary " Pass" "${DN_VOLUME_RESOURCE##cn=} <- ${CN_NCPSERVER##cn=}"
	else
		log_summary " FAILED" "${DN_VOLUME_RESOURCE##cn=} <- ${CN_NCPSERVER##cn=}"
		((ERR_LNK++))
	fi

	if [ "$DN_NS2VL" = "$DN_VL" ]; then
		log_summary " Pass" "${CN_NCPSERVER##cn=} -> ${CN_VOLUME##cn=}"
	else
		log_summary " FAILED" "${CN_NCPSERVER##cn=} -> ${CN_VOLUME##cn=}"
		((ERR_LNK++))
	fi

	if [ "$DN_VL2NS" = "$DN_NS" ]; then
		log_summary " Pass" "${CN_NCPSERVER##cn=} <- ${CN_VOLUME##cn=}"
	else
		log_summary " FAILED" "${CN_NCPSERVER##cn=} <- ${CN_VOLUME##cn=}"
		((ERR_LNK++))
	fi

	if [ "$DN_VR2VL" = "$DN_VL" ]; then
		log_summary " Pass" "${DN_VOLUME_RESOURCE##cn=} -> ${CN_VOLUME##cn=}"
	else
		log_summary " FAILED" "${DN_VOLUME_RESOURCE##cn=} -> ${CN_VOLUME##cn=}"
		((ERR_LNK++))
	fi

	if [ "$DN_NS2CL" = "$DN_CLUSTER" ]; then
		log_summary " Pass" "${CN_NCPSERVER##cn=} -> ${CN_CLUSTER##cn=}"
	else
		log_summary " FAILED" "${CN_NCPSERVER##cn=} -> ${CN_CLUSTER##cn=}"
		((ERR_LNK++))
	fi

	if [ "$DN_VL2PL" = "$DN_PL" ]; then
		log_summary " Pass" "${CN_VOLUME##cn=} -> ${CN_POOL##cn=}"
	else
		log_summary " FAILED" "${CN_VOLUME##cn=} -> ${CN_POOL##cn=}"
		((ERR_LNK++))
	fi

	if [ "$DN_PL2NS" = "$DN_NS" ]; then
		log_summary " Pass" "${CN_POOL##cn=} -> ${CN_NCPSERVER##cn=}"
	else
		log_summary " FAILED" "${CN_POOL##cn=} -> ${CN_NCPSERVER##cn=}"
		((ERR_LNK++))
	fi
	FMT_CURRENT=$FMT_PREV
}


##############################################################################
# main
##############################################################################

mkdir -p $LOGROOT
chmod 700 $LOGROOT
title
get_credentials
ldap_check
get_cluster
ERR_ATT=0
check_attributes Cluster "${CN_CLUSTER}" $FILE_CLUSTERS
TOTAL_ERRORS=$((TOTAL_ERRORS + ERR_ATT))
TOTAL_ATTR=$((TOTAL_ATTR + ERR_ATT))

SEQ_VR=0
FILE_VOLUME_RESOURCES="${LOGROOT}/${CN_CLUSTER}_vr$((SEQ_VR++))_volume-resources.txt"
ldap_cmd "$FILE_VOLUME_RESOURCES" "$DN_CLUSTER" "(objectclass=nCSVolumeResource)"

DN_VOLUME_RESOURCE_LIST=$(grep -i ^cn: $FILE_VOLUME_RESOURCES | awk '{print $2}')
#debug DN_VOLUME_RESOURCE_LIST
if [ -z "$DN_VOLUME_RESOURCE_LIST" ]; then
	log_detail "ERROR: No nCSVolumeResource objects found"
	log_detail
	((TOTAL_ERRORS++))
	show_summary
	exit 1
fi
TOTAL_VOLRES=$(echo "$DN_VOLUME_RESOURCE_LIST" | wc -l)
log_summary "Volume Resources:" $TOTAL_VOLRES

TOTAL_VOLRES=0
FMT_CURRENT=$FMT_OBJ
for DN_VOLUME_RESOURCE in ${DN_VOLUME_RESOURCE_LIST}
do
	log_detail
	log_detail "----------------------------------------------------"
	log_detail
	log_detail "$DN_VOLUME_RESOURCE Analyzing Volume Resource"
	ERR_VR=0
	ERR_OBJ=0
	ERR_ATT=0
	ERR_LNK=0
	LNK_VR2NS=0
	LNK_VR2VL=0
	LNK_NS2VL=0
	LNK_VL2NS=0
	# Query Volume Resource Objects
	FILE_BASE="${LOGROOT}/${CN_CLUSTER}_vr$((SEQ_VR++))"
	FILE_VOLUME_RESOURCE="${FILE_BASE}_${DN_VOLUME_RESOURCE}_1volres.txt"
	ldap_cmd "$FILE_VOLUME_RESOURCE" "$DN_CLUSTER" "(cn=$DN_VOLUME_RESOURCE)" "Volume Resource"

	DN_NCPSERVER=$(grep -i ^nCSNCPServer: $FILE_VOLUME_RESOURCE | awk '{print $2}')
	if [ -n "$DN_NCPSERVER" ]; then
		CN_NCPSERVER=$(echo $DN_NCPSERVER | cut -d, -f1)
		FILE_NCPSERVER="${FILE_BASE}_${DN_VOLUME_RESOURCE}_ncpserver.txt"
		ldap_cmd "$FILE_NCPSERVER" "$DN_CLUSTER_PARENT" "($CN_NCPSERVER)"  "NCP Server"
	else
		LNK_VR2NS=1
	fi

	DN_VOLUME=$(grep -i ^nCSVolumes: $FILE_VOLUME_RESOURCE | awk '{print $2}')
	if [ -n "$DN_VOLUME" ]; then
		CN_VOLUME=$(echo $DN_VOLUME | cut -d, -f1)
		FILE_VOLUME="${FILE_BASE}_${DN_VOLUME_RESOURCE}_volume.txt"
# consider changing DN_CLUSTER_PARENT to the nCSVolumes dn found in the FILE_VOLUME_RESOURCE file
		ldap_cmd "$FILE_VOLUME" "$DN_CLUSTER_PARENT" "($CN_VOLUME)" "Volume"

		DN_POOL=$(grep -i ^nssfsPool: $FILE_VOLUME | awk '{print $2}')
		CN_POOL=$(echo $DN_POOL | cut -d, -f1)
		FILE_POOL="${FILE_BASE}_${DN_VOLUME_RESOURCE}_pool.txt"
		ldap_cmd "$FILE_POOL" "$DN_CLUSTER_PARENT" "($CN_POOL)" "Pool"
	else
		LNK_VR2VL=1
	fi
	if [ $LNK_VR2VL -eq 0 -a $LNK_VR2NS -eq 1 ]; then
		# query volume for ncpserver
		DN_NCPSERVER=$(grep -i ^nCSNCPServer: $FILE_VOLUME | awk '{print $2}')
		if [ -n "$DN_NCPSERVER" ]; then
			CN_NCPSERVER=$(echo $DN_NCPSERVER | cut -d, -f1)
			FILE_NCPSERVER="${FILE_BASE}_${DN_VOLUME_RESOURCE}_ncpserver.txt"
			ldap_cmd "$FILE_NCPSERVER" "$DN_CLUSTER_PARENT" "($CN_NCPSERVER)"  "NCP Server*"
		else
			LNK_VL2NS=1
		fi
	fi
	if [ $LNK_VR2NS -eq 0 -a $LNK_VR2VL -eq 1 ]; then
		DN_VOLUME=$(grep -i ^nCSVolumes: $FILE_NCPSERVER | awk '{print $2}')
		if [ -n "$DN_VOLUME" ]; then
			CN_VOLUME=$(echo $DN_VOLUME | cut -d, -f1)
			FILE_VOLUME="${FILE_BASE}_${DN_VOLUME_RESOURCE}_volume.txt"
			# consider changing DN_CLUSTER_PARENT to the nCSVolumes dn found in the FILE_VOLUME file
			ldap_cmd "$FILE_VOLUME" "$DN_CLUSTER_PARENT" "($CN_VOLUME)" "Volume*"

			DN_POOL=$(grep -i ^nssfsPool: $FILE_VOLUME | awk '{print $2}')
			CN_POOL=$(echo $DN_POOL | cut -d, -f1)
			FILE_POOL="${FILE_BASE}_${DN_VOLUME_RESOURCE}_pool.txt"
			ldap_cmd "$FILE_POOL" "$DN_CLUSTER_PARENT" "($CN_POOL)" "Pool*"
		else
			LNK_NS2VL=1
		fi
	fi

	validate_required_objects
	validate_object_attributes
	confirm_object_links

	TOTAL_OBJ=$((TOTAL_OBJ + ERR_OBJ))
	TOTAL_ATTR=$((TOTAL_ATTR + ERR_ATT))
	TOTAL_LINK=$((TOTAL_LINK + ERR_LNK))
	ERR_VR=$((ERR_OBJ + ERR_ATT + ERR_LNK))
	TOTAL_ERRORS=$((TOTAL_ERRORS + ERR_OBJ + ERR_ATT + ERR_LNK))
	[ $ERR_OBJ -gt 0 ] && log_summary "Missing Objects:" $ERR_OBJ
	[ $ERR_ATT -gt 0 ] && log_summary "Missing Attributes:" $ERR_ATT
	[ $ERR_LNK -gt 0 ] && log_summary "Mismatched Object Links:" $ERR_LNK
	if (( ERR_VR )); then
		log_detail "$DN_VOLUME_RESOURCE Volume Resource Status: Errors Found"
	else
		log_detail "$DN_VOLUME_RESOURCE Volume Resource Status: Passed"
	fi
	((TOTAL_VOLRES++))
done

show_summary

exit 0

